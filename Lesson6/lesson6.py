import re

test_string = "ip adress 192.168.1.1"
m = re.match(r"^ip adress .{1,3}\.\d{1,3}\..{1,3}\..{1,3}$", test_string) # r при использовании экранирования в регулярном выражении
m = re.match(r"^ip adress [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$", test_string) # r при использовании экранирования в регулярном выражении
m = re.match(r"^ip adress ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})", test_string) # r при использовании экранирования в регулярном выражении
m = re.match(r"^ip adress ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) ?", test_string) # r при использовании экранирования в регулярном выражении, в конце не обязательный пробел

test_string = "ip adress 192.168.1.1 255.255.255.0"
m = re.match(r"^ip adress ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ?){2}", test_string) # 2 раза встречаеться вхождение
print(m.groups())
print(bool(m)) # Элемент вхождения ( элемент кортежа = (регулярека) тоесть тому что в скобках тут одна группа
# ('255.255.255.0',)
# True

test_string = "ip adress 192.168.1.1 255.255.255.0"
m = re.match(r"^ip adress ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})", test_string) # 2 раза встречаеться вхождение
print(m.groups())
print(bool(m)) # Элемент вхождения ( элемент кортежа = (регулярека) тоесть тому что в скобках тут 2 группы
# ('192.168.1.1', '255.255.255.0')
# True


test_string = "ip adress 192.168.1.1 255.255.255.0"
m = re.match(r"^ip adress (?:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})", test_string) # 2 раза встречаеться вхождение но ?: игнорируеть включение в в groups
print(m.groups())
print(bool(m)) # Элемент вхождения ( элемент кортежа = (регулярека) тоесть тому что в скобках тут 2 группы
# ('255.255.255.0',)
# True


test_string = "ip adress 192.168.1.1 255.255.255.0"
m = re.finditer(r"^ip adress (?:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}) ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})", test_string) # 2 раза встречаеться вхождение но ?: игнорируеть включение в в groups
# ('255.255.255.0',)
# True
for _ in m:
    print(_)